CREATE DATABASE IF NOT EXISTS zarasalesdata;

USE zarasalesdata;
------------- CREATE TABLE NAMED SALES -------------

CREATE TABLE IF NOT EXISTS sales(
PRODUCT_ID INTEGER(10) NOT NULL PRIMARY KEY,
PRODUCT_POSITION VARCHAR(30) NOT NULL,
PROMOTION TEXT(10) NOT NULL,
PRODUCT_CATEGORY TEXT(20) NOT NULL,
SEASONAL TEXT(10) NOT NULL,
SALES_VOLUME INTEGER(10) NOT NULL,
BRAND TEXT(5) NOT NULL,
URL VARCHAR(100) NOT NULL,
SKU VARCHAR(100) NOT NULL,
NAME VARCHAR(100) NOT NULL,
DESCRIPTION VARCHAR(1000) NOT NULL,
PRICE DECIMAL(12,2) NOT NULL,
CURRENCY VARCHAR(5) NOT NULL,
SCRAPED_AT VARCHAR(100) NOT NULL,
TERMS TEXT(10) NOT NULL,
SECTION TEXT(10) NOT NULL);

SELECT * FROM SALES;

----------- HOW MANY UNIQUE PRODUCT_POSITIONS ARE THERE --------------

SELECT DISTINCT PRODUCT_POSITION FROM SALES;

----------- WE HAVE 3 DISTINCT PRODUCT_POSITION, FRONT OF STORE, END-CAP, AISLE -----------------

-------------- HOW MANY UNIQUE TERMS DO WE HAVE --------------------

SELECT DISTINCT TERMS FROM SALES;

-------------------- WE HAVE 5 DISTINCT TERMS IN THE DATABASE, JACKETS, SHOES, SWEATERS, T-SHIRTS, JEANS -------------------------

SELECT DISTINCT SECTION FROM SALES;

----------------------- WE HAVE 2 DISTINCT SECTIONS, MAN AND WOMAN -------------------------------

----------------------------------------- FASTEST SELLING SECTION ----------------------------------

SELECT 
SECTION,
COUNT(SECTION) AS CNT
FROM SALES
GROUP BY SECTION
ORDER BY CNT DESC;

-------------------------------------------------- THE FASTEST SELLING SECTION IS THE MAN SECTION ----------------------------------

-------------------------------------------------------------- FASTEST SELLING TERMS -----------------------------------------------

SELECT
TERMS,
COUNT(TERMS) AS CONT
FROM SALES
GROUP BY TERMS
ORDER BY CONT DESC;

----------------------------------------------------------------- THE FASTEST SELLING TERMS IS JACKETS ------------------------------------

----------------------------------------------------------------- THE DISPLAY LOCATION IN THE STORE WHERE PRODUCTS GET SOLD THE FASTEST -------------

SELECT
PRODUCT_POSITION,
COUNT(PRODUCT_POSITION) AS CT
FROM SALES
GROUP BY PRODUCT_POSITION
ORDER BY CT DESC;

-------------------------------------------------------------------- THE DISPLAY LOCATION WHERE PRODUCTS GET SOLD THE MOST IS THE AISLE LOCATION -----------

-------------------------- CREATE NEW COLUMN COST OF GOODS SOLD(COGS) -----------------------------

ALTER TABLE SALES ADD COLUMN COGS DECIMAL(12,2) NOT NULL;

UPDATE SALES
SET COGS = SALES_VOLUME*PRICE;

----------------------------------- CALCULATE TOTAL REVENUE GENERATED BY THE STORE -----------------------------

SELECT
SUM(COGS) FROM SALES;

-------------------------------------- TOTAL REVENUE GENERATED BY THE STORE IS $38,988,476.48

-------------------------------------------- AVERAGE QUANTITY OF GOODS SOLD ---------------------------

SELECT
AVG(SALES_VOLUME)  AS AVERAGE_QUANTITY_OF_GOODS_SOLD
FROM SALES;

-------------------------------------------------- AVERAGE QUANTITY OF GOODS SOLD IS 1823.7024 --------------------------------------------

----------------------------------------------------- REVENUE GENERATED BY EACH SECTION --------------------------------

SELECT
SECTION,
SUM(COGS) AS TOTAL_REVENUE_BY_SECTION
FROM SALES
GROUP BY SECTION
ORDER BY TOTAL_REVENUE_BY_SECTION DESC;

----------------------------------------------- THE MAN SECTION GENERATES THE RVEVENUE OF $35,712,663.03 -------------------------

-------------------------------------------------- REVENUE GENERATED BY EACH TERM ---------------------------------------

SELECT 
TERMS,
SUM(COGS) AS TOTAL_REVENUE_BY_TERM
 FROM SALES
 GROUP BY TERMS
 ORDER BY TOTAL_REVENUE_BY_TERM DESC;
 
----------------------------------------- THE TERMS THAT GENERATED THE MOST REVENUE IS JACKETS WITH $26,581,815.87 --------------------

----------------------------------- TOP 3 TERMS ---------------------------------------------------

SELECT 
TERMS,
SUM(COGS) AS TOTAL_REVENUE_BY_TERM
 FROM SALES
 GROUP BY TERMS
 ORDER BY TOTAL_REVENUE_BY_TERM DESC
 LIMIT 3;